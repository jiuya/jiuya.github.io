<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Hello Blog</title><link href="/" rel="alternate"></link><link href="/feeds/all.atom.xml" rel="self"></link><id>/</id><updated>2018-05-09T00:00:00+09:00</updated><entry><title>debianのtmuxを2.7にアップデート</title><link href="/debiannotmuxwo27niatsupudeto.html" rel="alternate"></link><published>2018-05-09T00:00:00+09:00</published><updated>2018-05-09T00:00:00+09:00</updated><author><name>jiuya</name></author><id>tag:None,2018-05-09:/debiannotmuxwo27niatsupudeto.html</id><summary type="html">&lt;h2&gt;動機&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/tmux-plugins/tmux-copycat"&gt;tmux-plugins/tmux-copycat&lt;/a&gt;が使いたいがtmux2.3だと動かなかったのでアップデートする。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;環境&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Debian 9.4 stable&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;インストール&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Debian stableのパッケージはtmux2.3なのでtestingからパッケージを取ってくる。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;/etc/apt/sources.list&lt;/code&gt; にtesting パッケージを追加する。&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c"&gt;# testing&lt;/span&gt;
&lt;span class="k"&gt;deb&lt;/span&gt; &lt;span class="s"&gt;http://debian-mirror.sakura.ne.jp/debian/&lt;/span&gt; &lt;span class="kp"&gt;testing&lt;/span&gt; &lt;span class="kp"&gt;main&lt;/span&gt; &lt;span class="kp"&gt;contrib&lt;/span&gt; &lt;span class="kp"&gt;non-free&lt;/span&gt;
&lt;span class="k"&gt;deb-src&lt;/span&gt; &lt;span class="s"&gt;http://debian-mirror.sakura.ne.jp/debian/&lt;/span&gt; &lt;span class="kp"&gt;testing&lt;/span&gt; &lt;span class="kp"&gt;main&lt;/span&gt; &lt;span class="kp"&gt;contrib&lt;/span&gt; &lt;span class="kp"&gt;non-free&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;インストールする。&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sudo apt update
$ sudo apt install …&lt;/pre&gt;&lt;/div&gt;</summary><content type="html">&lt;h2&gt;動機&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/tmux-plugins/tmux-copycat"&gt;tmux-plugins/tmux-copycat&lt;/a&gt;が使いたいがtmux2.3だと動かなかったのでアップデートする。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;環境&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Debian 9.4 stable&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;インストール&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Debian stableのパッケージはtmux2.3なのでtestingからパッケージを取ってくる。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;/etc/apt/sources.list&lt;/code&gt; にtesting パッケージを追加する。&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c"&gt;# testing&lt;/span&gt;
&lt;span class="k"&gt;deb&lt;/span&gt; &lt;span class="s"&gt;http://debian-mirror.sakura.ne.jp/debian/&lt;/span&gt; &lt;span class="kp"&gt;testing&lt;/span&gt; &lt;span class="kp"&gt;main&lt;/span&gt; &lt;span class="kp"&gt;contrib&lt;/span&gt; &lt;span class="kp"&gt;non-free&lt;/span&gt;
&lt;span class="k"&gt;deb-src&lt;/span&gt; &lt;span class="s"&gt;http://debian-mirror.sakura.ne.jp/debian/&lt;/span&gt; &lt;span class="kp"&gt;testing&lt;/span&gt; &lt;span class="kp"&gt;main&lt;/span&gt; &lt;span class="kp"&gt;contrib&lt;/span&gt; &lt;span class="kp"&gt;non-free&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;インストールする。&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sudo apt update
$ sudo apt install tmux/testing
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;libc6 のバージョンが低いと怒られるのでlibc6をアップデートする。&lt;/li&gt;
&lt;li&gt;そのままでは入らないので、依存関係を楽に解決するためにaptitudeを使用する。&lt;/li&gt;
&lt;li&gt;良さげな解決方法を採用する。&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sudo aptitude install libc6-dev/testing libc6/testing
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;その後もう一回やると入る。&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sudo apt install tmux/testing
$ tmux -V
tmux &lt;span class="m"&gt;2&lt;/span&gt;.7
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;雑感&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;stableでlibc6上げるようなことするなら最初からtesting使っていれば良かったのでは？&lt;/li&gt;
&lt;li&gt;Desktop環境で次使うときはtestingにしたい。（Debian 10 busterがどうなるかによるけど）&lt;/li&gt;
&lt;/ul&gt;</content><category term="develop"></category><category term="tmux"></category><category term="debian"></category></entry><entry><title>Raspberry Pi でfishのビルド</title><link href="/raspberry-pi-defishnobirudo.html" rel="alternate"></link><published>2018-04-24T00:00:00+09:00</published><updated>2018-04-24T00:00:00+09:00</updated><author><name>jiuya</name></author><id>tag:None,2018-04-24:/raspberry-pi-defishnobirudo.html</id><summary type="html">&lt;h2&gt;動機&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;自分のメインの環境をfishにしてfishの楽さを知ってしまったのでラズパイにも入れたい。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;環境&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Raspberry Pi 3 Model B V1.2&lt;/li&gt;
&lt;li&gt;rasbian-stretch-lite 2018-04-18&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;準備&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;必要なパッケージをインストールする。&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sudo aptitude install cmake autoconf git g++ libncurses5-dev &lt;span class="se"&gt;\&lt;/span&gt;
gettext libreadline-dev libeditline-dev doxygen libedit-dev
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;ビルド&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ git clone https://github.com/fish-shell/fish-shell.git
$ &lt;span class="nb"&gt;cd&lt;/span&gt; fish-shell
$ mkdir build
$ &lt;span class="nb"&gt;cd&lt;/span&gt; build
$ cmake .. -DCMAKE_BUILD_TYPE&lt;span class="o"&gt;=&lt;/span&gt;Release
$ make
$ sudo make install
&lt;/pre&gt;&lt;/div&gt;</summary><content type="html">&lt;h2&gt;動機&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;自分のメインの環境をfishにしてfishの楽さを知ってしまったのでラズパイにも入れたい。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;環境&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Raspberry Pi 3 Model B V1.2&lt;/li&gt;
&lt;li&gt;rasbian-stretch-lite 2018-04-18&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;準備&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;必要なパッケージをインストールする。&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sudo aptitude install cmake autoconf git g++ libncurses5-dev &lt;span class="se"&gt;\&lt;/span&gt;
gettext libreadline-dev libeditline-dev doxygen libedit-dev
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;ビルド&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ git clone https://github.com/fish-shell/fish-shell.git
$ &lt;span class="nb"&gt;cd&lt;/span&gt; fish-shell
$ mkdir build
$ &lt;span class="nb"&gt;cd&lt;/span&gt; build
$ cmake .. -DCMAKE_BUILD_TYPE&lt;span class="o"&gt;=&lt;/span&gt;Release
$ make
$ sudo make install
&lt;/pre&gt;&lt;/div&gt;</content><category term="develop"></category><category term="Raspberry Pi"></category><category term="fish shell"></category></entry><entry><title>neovimのset pasteの挙動</title><link href="/neovimnoset-pastenoju-dong.html" rel="alternate"></link><published>2018-04-23T00:00:00+09:00</published><updated>2018-04-23T00:00:00+09:00</updated><author><name>jiuya</name></author><id>tag:None,2018-04-23:/neovimnoset-pastenoju-dong.html</id><summary type="html">&lt;h2&gt;問題点&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;neovim の &lt;code&gt;:set paste&lt;/code&gt;の挙動がvimのときと反対になってるように見える。&lt;/li&gt;
&lt;li&gt;つまり、defaultでインデントがある文字列がそのまま貼り付けできて、&lt;code&gt;:set paste&lt;/code&gt;をするとindentが入ってしまう。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;環境&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;neovim v2.2.0&lt;/li&gt;
&lt;li&gt;tmux 2.3&lt;/li&gt;
&lt;li&gt;fish 2.7.1&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;調べる&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;落ち着いて&lt;code&gt;:help paste&lt;/code&gt;を見てみる。&lt;/li&gt;
&lt;li&gt;&lt;a href="https://neovim.io/doc/user/options.html#" title="paste"&gt;neovim option&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;This option is obsolete; |bracketed-paste-mode| is built-in.
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;なんかneovimではpaste optionは廃止されているらしい。&lt;/li&gt;
&lt;li&gt;brackted-paste-mode とは？&lt;/li&gt;
&lt;li&gt;&lt;a href="https://cirw.in/blog/bracketed-paste"&gt;bracketed paste mode&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;xtermの拡張で貼り付け時に文字列の前に&lt;code&gt;&amp;lt;ESC&amp;gt;200~&lt;/code&gt; 後ろに&lt;code&gt;&amp;lt;ESC&amp;gt;201 …&lt;/code&gt;&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;h2&gt;問題点&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;neovim の &lt;code&gt;:set paste&lt;/code&gt;の挙動がvimのときと反対になってるように見える。&lt;/li&gt;
&lt;li&gt;つまり、defaultでインデントがある文字列がそのまま貼り付けできて、&lt;code&gt;:set paste&lt;/code&gt;をするとindentが入ってしまう。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;環境&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;neovim v2.2.0&lt;/li&gt;
&lt;li&gt;tmux 2.3&lt;/li&gt;
&lt;li&gt;fish 2.7.1&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;調べる&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;落ち着いて&lt;code&gt;:help paste&lt;/code&gt;を見てみる。&lt;/li&gt;
&lt;li&gt;&lt;a href="https://neovim.io/doc/user/options.html#" title="paste"&gt;neovim option&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;This option is obsolete; |bracketed-paste-mode| is built-in.
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;なんかneovimではpaste optionは廃止されているらしい。&lt;/li&gt;
&lt;li&gt;brackted-paste-mode とは？&lt;/li&gt;
&lt;li&gt;&lt;a href="https://cirw.in/blog/bracketed-paste"&gt;bracketed paste mode&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;xtermの拡張で貼り付け時に文字列の前に&lt;code&gt;&amp;lt;ESC&amp;gt;200~&lt;/code&gt; 後ろに&lt;code&gt;&amp;lt;ESC&amp;gt;201~&lt;/code&gt; がつくようになる。&lt;/li&gt;
&lt;li&gt;つまり、手で打った文字かpasteした文字かを判別することができる。&lt;/li&gt;
&lt;li&gt;&lt;a href="https://srad.jp/~doda/journal/506765/"&gt;vim で bracketed paste modeに対応させる記事&lt;/a&gt;もあった。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;結論&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;最近の端末はBracketed Paste Mode に対応しているのでneovimではset pasteする必要はない。&lt;/li&gt;
&lt;li&gt;neovimでset pasteしたときにインデントが入ってしまうのは謎だがobsoleteなんだから使わなければいいや。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参考&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://neovim.io/doc/user/options.html#" title="paste"&gt;neovim option&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://cirw.in/blog/bracketed-paste"&gt;bracketed paste mode&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://invisible-island.net/xterm/ctlseqs/ctlseqs.html#h2-Bracketed-Paste-Mode"&gt;XTerm Control Sequences&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="develop"></category><category term="neovim"></category></entry><entry><title>このサイトの更新方法</title><link href="/konosaitonogeng-xin-fang-fa.html" rel="alternate"></link><published>2018-04-09T13:43:00+09:00</published><updated>2018-04-09T13:43:00+09:00</updated><author><name>jiuya</name></author><id>tag:None,2018-04-09:/konosaitonogeng-xin-fang-fa.html</id><summary type="html">&lt;h1&gt;更新しようとしたら使い方を忘れていたのでメモ&lt;/h1&gt;
&lt;h2&gt;準備&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;$ pelican-quickstart&lt;/code&gt; が行われているものとする。&lt;/li&gt;
&lt;li&gt;このリポジトリをクローンする。&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ git clone --recursive -b &lt;span class="nb"&gt;source&lt;/span&gt; https://github.com/jiuya/jiuya.github.io.git
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;必要なパッケージをインストールする。&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ pip install -r requirements.txt
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;記事を書く&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;content/&lt;/code&gt; 以下に記事を書きマークダウンで保存する。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Githubにアップロード&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;マークダウン形式のファイルをHTMLファイルに変換する。&lt;/li&gt;
&lt;li&gt;変換したファイルを&lt;strong&gt;ghp-import&lt;/strong&gt;を使用してGithubにpushする。&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;make&lt;/span&gt; &lt;span class="n"&gt;html&lt;/span&gt;
&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;ghp&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;output&lt;/span&gt;
&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;git&lt;/span&gt; &lt;span class="n"&gt;push&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="n"&gt;origin&lt;/span&gt; &lt;span class="n"&gt;gh&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;pages&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;master&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;(追記) githubにアップロードはMakefileに含まれていた。&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ make html
$ make github …&lt;/pre&gt;&lt;/div&gt;</summary><content type="html">&lt;h1&gt;更新しようとしたら使い方を忘れていたのでメモ&lt;/h1&gt;
&lt;h2&gt;準備&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;$ pelican-quickstart&lt;/code&gt; が行われているものとする。&lt;/li&gt;
&lt;li&gt;このリポジトリをクローンする。&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ git clone --recursive -b &lt;span class="nb"&gt;source&lt;/span&gt; https://github.com/jiuya/jiuya.github.io.git
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;必要なパッケージをインストールする。&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ pip install -r requirements.txt
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;記事を書く&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;content/&lt;/code&gt; 以下に記事を書きマークダウンで保存する。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Githubにアップロード&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;マークダウン形式のファイルをHTMLファイルに変換する。&lt;/li&gt;
&lt;li&gt;変換したファイルを&lt;strong&gt;ghp-import&lt;/strong&gt;を使用してGithubにpushする。&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;make&lt;/span&gt; &lt;span class="n"&gt;html&lt;/span&gt;
&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;ghp&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;output&lt;/span&gt;
&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;git&lt;/span&gt; &lt;span class="n"&gt;push&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="n"&gt;origin&lt;/span&gt; &lt;span class="n"&gt;gh&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;pages&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;master&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;(追記) githubにアップロードはMakefileに含まれていた。&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ make html
$ make github
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;でも良い。&lt;/p&gt;
&lt;h2&gt;参考&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://qiita.com/akimach/items/dfcac164ac5669a6378://kazukousen.github.io/python-pelican-install.html"&gt;PelicanとGitHub-pagesでブログ開設&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://memo.laughk.org/2014/08/10/tinker2pelican-repo.html"&gt;ブログジェネレータをTinkererからPelicanに移行した&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content></entry><entry><title>おはよう世界</title><link href="/ohayoushi-jie.html" rel="alternate"></link><published>2018-01-09T19:08:00+09:00</published><updated>2018-01-09T19:08:00+09:00</updated><author><name>jiuya</name></author><id>tag:None,2018-01-09:/ohayoushi-jie.html</id><summary type="html">&lt;p&gt;ブログを作ってみた。&lt;/p&gt;</summary><content type="html">&lt;p&gt;ブログを作ってみた。&lt;/p&gt;</content></entry><entry><title>test</title><link href="/test.html" rel="alternate"></link><published>2018-01-09T00:00:00+09:00</published><updated>2018-01-09T00:00:00+09:00</updated><author><name>jiuya</name></author><id>tag:None,2018-01-09:/test.html</id><summary type="html">&lt;h1&gt;test&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;test&lt;/li&gt;
&lt;li&gt;hoge&lt;/li&gt;
&lt;/ul&gt;</summary><content type="html">&lt;h1&gt;test&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;test&lt;/li&gt;
&lt;li&gt;hoge&lt;/li&gt;
&lt;/ul&gt;</content></entry></feed>