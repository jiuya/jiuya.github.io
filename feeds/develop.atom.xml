<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Hello Blog - develop</title><link href="/" rel="alternate"></link><link href="/feeds/develop.atom.xml" rel="self"></link><id>/</id><updated>2019-01-10T00:00:00+09:00</updated><entry><title>Visual Studio Code のCortex-DebugでSemihostingを有効にする</title><link href="/visual-studio-code-nocortex-debugdesemihostingwoyou-xiao-nisuru.html" rel="alternate"></link><published>2019-01-10T00:00:00+09:00</published><updated>2019-01-10T00:00:00+09:00</updated><author><name>jiuya</name></author><id>tag:None,2019-01-10:/visual-studio-code-nocortex-debugdesemihostingwoyou-xiao-nisuru.html</id><summary type="html">&lt;h2&gt;動機&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Visual Studio Code でSemihostingの有効の仕方をよく忘れるのでメモ。  &lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;環境&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Visual Studio Code(Linux) 1.29  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://marketplace.visualstudio.com/items?itemName=marus25.cortex-debug"&gt;Cortex-Debug&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;target STM32F446RE  &lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;変更点&lt;/h2&gt;
&lt;p&gt;以下をlaunch.jsonに追加する。  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;quot;postLaunchCommands&amp;quot;: [
    &amp;quot;monitor arm semihosting enable&amp;quot;
],
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;これでデバッグ開始するとSemihostingが有効になる。
Outputタブの&lt;strong&gt;Adapter Output&lt;/strong&gt;にSemihostingの内容が出力される。  &lt;/p&gt;
&lt;h2&gt;ソース&lt;/h2&gt;
&lt;p&gt;https://github.com/Marus/cortex-debug/issues/115  &lt;/p&gt;</summary><content type="html">&lt;h2&gt;動機&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Visual Studio Code でSemihostingの有効の仕方をよく忘れるのでメモ。  &lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;環境&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Visual Studio Code(Linux) 1.29  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://marketplace.visualstudio.com/items?itemName=marus25.cortex-debug"&gt;Cortex-Debug&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;target STM32F446RE  &lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;変更点&lt;/h2&gt;
&lt;p&gt;以下をlaunch.jsonに追加する。  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;quot;postLaunchCommands&amp;quot;: [
    &amp;quot;monitor arm semihosting enable&amp;quot;
],
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;これでデバッグ開始するとSemihostingが有効になる。
Outputタブの&lt;strong&gt;Adapter Output&lt;/strong&gt;にSemihostingの内容が出力される。  &lt;/p&gt;
&lt;h2&gt;ソース&lt;/h2&gt;
&lt;p&gt;https://github.com/Marus/cortex-debug/issues/115  &lt;/p&gt;</content><category term="develop"></category><category term="embedded"></category><category term="Visual Studio Code"></category></entry><entry><title>自分の開発環境</title><link href="/zi-fen-nokai-fa-huan-jing.html" rel="alternate"></link><published>2018-12-03T00:00:00+09:00</published><updated>2018-12-03T00:00:00+09:00</updated><author><name>jiuya</name></author><id>tag:None,2018-12-03:/zi-fen-nokai-fa-huan-jing.html</id><summary type="html">&lt;p&gt;この記事は&lt;a href="https://adventar.org/calendars/2959"&gt;高知工科大 Advent Calendar 2018&lt;/a&gt;の三日目の記事です。&lt;/p&gt;
&lt;h2&gt;はじめに&lt;/h2&gt;
&lt;p&gt;いよいよ毎年恒例&lt;strong&gt;Advent Calendar&lt;/strong&gt;の時期がやってきました。&lt;/p&gt;
&lt;p&gt;これといって書くことが思いつかなかったので2018年の自分の開発環境(Linux)でも書こうと思います。&lt;/p&gt;
&lt;p&gt;この開発環境では主にマイコンの開発や組み込みLinuxの開発に使用してます。&lt;/p&gt;
&lt;h2&gt;PC&lt;/h2&gt;
&lt;p&gt;PCは&lt;strong&gt;ThinkPad X250&lt;/strong&gt;を使用してます。&lt;br&gt;
メモリが4GB(少ねぇ)でCPUがi5-5300Uです。  重い作業はメインPC(Windows)でやらせるのでスペックは抑えめです。&lt;br&gt;
そのうちメモリ8GBにしたい。&lt;/p&gt;
&lt;h2&gt;ディストリビューション&lt;/h2&gt;
&lt;p&gt;OSは&lt;strong&gt;DebianのStable&lt;/strong&gt;(stretch)です。&lt;br&gt;
Debianを選択した理由は主に以下の点です。
- Ubuntu Desktopと比べていらないものが入ってない。
- Ubuntu Desktopより簡単にディスプレイマネージャ、ウィンドウマネージャを変更できる。
- Gentooと比べて非力なPCでも初期セットアップが早い。
- Archはpacmanに慣れることができなかった。&lt;/p&gt;
&lt;p&gt;サービスマネージャはDebianのdefaultの&lt;strong&gt;systemd&lt;/strong&gt;を使用しています。&lt;/p&gt;
&lt;h2&gt;ディスプレイマネージャ、ウィンドウマネージャ&lt;/h2&gt;
&lt;p&gt;ディスプレイマネージャは&lt;strong&gt;LightDM&lt;/strong&gt;です。選択理由はメジャーだから。むしろ他のディスプレイマネージャをあまり使ったことがない …&lt;/p&gt;</summary><content type="html">&lt;p&gt;この記事は&lt;a href="https://adventar.org/calendars/2959"&gt;高知工科大 Advent Calendar 2018&lt;/a&gt;の三日目の記事です。&lt;/p&gt;
&lt;h2&gt;はじめに&lt;/h2&gt;
&lt;p&gt;いよいよ毎年恒例&lt;strong&gt;Advent Calendar&lt;/strong&gt;の時期がやってきました。&lt;/p&gt;
&lt;p&gt;これといって書くことが思いつかなかったので2018年の自分の開発環境(Linux)でも書こうと思います。&lt;/p&gt;
&lt;p&gt;この開発環境では主にマイコンの開発や組み込みLinuxの開発に使用してます。&lt;/p&gt;
&lt;h2&gt;PC&lt;/h2&gt;
&lt;p&gt;PCは&lt;strong&gt;ThinkPad X250&lt;/strong&gt;を使用してます。&lt;br&gt;
メモリが4GB(少ねぇ)でCPUがi5-5300Uです。  重い作業はメインPC(Windows)でやらせるのでスペックは抑えめです。&lt;br&gt;
そのうちメモリ8GBにしたい。&lt;/p&gt;
&lt;h2&gt;ディストリビューション&lt;/h2&gt;
&lt;p&gt;OSは&lt;strong&gt;DebianのStable&lt;/strong&gt;(stretch)です。&lt;br&gt;
Debianを選択した理由は主に以下の点です。
- Ubuntu Desktopと比べていらないものが入ってない。
- Ubuntu Desktopより簡単にディスプレイマネージャ、ウィンドウマネージャを変更できる。
- Gentooと比べて非力なPCでも初期セットアップが早い。
- Archはpacmanに慣れることができなかった。&lt;/p&gt;
&lt;p&gt;サービスマネージャはDebianのdefaultの&lt;strong&gt;systemd&lt;/strong&gt;を使用しています。&lt;/p&gt;
&lt;h2&gt;ディスプレイマネージャ、ウィンドウマネージャ&lt;/h2&gt;
&lt;p&gt;ディスプレイマネージャは&lt;strong&gt;LightDM&lt;/strong&gt;です。選択理由はメジャーだから。むしろ他のディスプレイマネージャをあまり使ったことがない。&lt;/p&gt;
&lt;p&gt;ウィンドウマネージャはタイル型ウィンドウマネージャのi3wmです。&lt;br&gt;
タイル型ウィンドウマネージャとはWindowsなどのようにウィンドウが重なることがなくタイル状に等間隔に配置されるウィンドウマネージャの総称です。&lt;br&gt;
i3の選択理由は以下の点です。
- ほぼキーボードで作業できる。一応マウスも使える。(自分のキーバインドでは&lt;strong&gt;Windows key + Enter&lt;/strong&gt;でターミナルが開く、&lt;strong&gt;Windows key + →&lt;/strong&gt;でウィンドウ移動など)
- ダイアログウインドウなどは普通のデスクトップ環境と同じように使える。ダイアログでないウインドウもショートカットキーでタイル化解除(フローティング化)させることが可能。  &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Windows key + Enter&lt;/strong&gt; でターミナルを開らける快感を覚えると戻って来れなくなります。&lt;br&gt;
詳細は他のサイトに譲ります。&lt;br&gt;
&lt;a href="https://trap.jp/post/425/"&gt;タイル型ウインドウマネージャーが凄い - i3wm&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;ターミナル環境&lt;/h2&gt;
&lt;p&gt;使用しているターミナルは&lt;a href="https://launchpad.net/sakura"&gt;&lt;strong&gt;Sakura&lt;/strong&gt;&lt;/a&gt;を使用してます。&lt;br&gt;
テキストエディタでもサーバーの会社でもないです。&lt;br&gt;
&lt;strong&gt;libvte&lt;/strong&gt;(gnome-terminal)ベースの端末エミュレータです。&lt;br&gt;
画面分割やタブなどの機能はtmuxやvimなどで行うので、シンプルなlibvteベースのターミナルがほしかったのでこれにしました。&lt;/p&gt;
&lt;h2&gt;tmux&lt;/h2&gt;
&lt;p&gt;昔はscreenを使っていましたが今はtmuxです。&lt;br&gt;
prefixは&lt;strong&gt;Ctrl+a&lt;/strong&gt;にしています。Caps LockをCtrlに割り当てているので、そこから近いaを選択しているだけです。minicomのdefaultのprefixと被っているのがちょっと問題ではあります。  &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;tpm&lt;/strong&gt;を使ってplugin管理もしてます。
以下が入れているpluginです。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;set -g @tpm_plugins &amp;#39;               \
 tmux-plugins/tpm                   \
 tmux-plugins/tmux-yank             \
 tmux-plugins/tmux-open             \
 tmux-plugins/tmux-resurrect        \
 tmux-plugins/tmux-battery          \
 tmux-plugins/tmux-pain-control     \
 tmux-plugins/tmux-copycat          \
 tmux-plugins/tmux-prefix-highlight \
&amp;#39;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;tmux-yank&lt;/strong&gt;や&lt;strong&gt;tmux-copycat&lt;/strong&gt;などのコピー系プラグインは端末に表示されているすべての情報を簡単にコピーペーストできるので非常に便利です。  &lt;/p&gt;
&lt;h2&gt;shell&lt;/h2&gt;
&lt;p&gt;shellは&lt;strong&gt;fish shell+neovim&lt;/strong&gt;を使用しています。&lt;br&gt;
パッケージ管理には&lt;strong&gt;Fisherman&lt;/strong&gt;を使用してます。&lt;br&gt;
fish は特に設定しなくても見やすくて使いやすいシェルになるのでおすすめです。&lt;br&gt;
ただbashやzshの記法に慣れているとパイプとかリダイレクトとかで自分はよく間違えるのでその辺はめんどくさいです。&lt;/p&gt;
&lt;h2&gt;おわりに&lt;/h2&gt;
&lt;p&gt;2018年は転職?したりといろいろ変化のあった年だったので開発環境の入れ替えなどをしました。&lt;br&gt;
この辺の情報はすぐトレンドが移るのでこれからもキャッチアップし続けれる人間になりたいなーと思いました。&lt;br&gt;
書くの疲れたのでこの辺で終わります。&lt;/p&gt;</content><category term="develop"></category><category term="debian"></category><category term="i3wm"></category></entry><entry><title>Raspberry Pi でfishのビルド</title><link href="/raspberry-pi-defishnobirudo.html" rel="alternate"></link><published>2018-04-24T00:00:00+09:00</published><updated>2018-04-24T00:00:00+09:00</updated><author><name>jiuya</name></author><id>tag:None,2018-04-24:/raspberry-pi-defishnobirudo.html</id><summary type="html">&lt;h2&gt;動機&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;自分のメインの環境をfishにしてfishの楽さを知ってしまったのでラズパイにも入れたい。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;環境&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Raspberry Pi 3 Model B V1.2&lt;/li&gt;
&lt;li&gt;rasbian-stretch-lite 2018-04-18&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;準備&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;必要なパッケージをインストールする。&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sudo aptitude install cmake autoconf git g++ libncurses5-dev &lt;span class="se"&gt;\&lt;/span&gt;
gettext libreadline-dev libeditline-dev doxygen libedit-dev
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;ビルド&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ git clone https://github.com/fish-shell/fish-shell.git
$ &lt;span class="nb"&gt;cd&lt;/span&gt; fish-shell
$ mkdir build
$ &lt;span class="nb"&gt;cd&lt;/span&gt; build
$ cmake .. -DCMAKE_BUILD_TYPE&lt;span class="o"&gt;=&lt;/span&gt;Release
$ make
$ sudo make install
&lt;/pre&gt;&lt;/div&gt;</summary><content type="html">&lt;h2&gt;動機&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;自分のメインの環境をfishにしてfishの楽さを知ってしまったのでラズパイにも入れたい。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;環境&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Raspberry Pi 3 Model B V1.2&lt;/li&gt;
&lt;li&gt;rasbian-stretch-lite 2018-04-18&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;準備&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;必要なパッケージをインストールする。&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sudo aptitude install cmake autoconf git g++ libncurses5-dev &lt;span class="se"&gt;\&lt;/span&gt;
gettext libreadline-dev libeditline-dev doxygen libedit-dev
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;ビルド&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ git clone https://github.com/fish-shell/fish-shell.git
$ &lt;span class="nb"&gt;cd&lt;/span&gt; fish-shell
$ mkdir build
$ &lt;span class="nb"&gt;cd&lt;/span&gt; build
$ cmake .. -DCMAKE_BUILD_TYPE&lt;span class="o"&gt;=&lt;/span&gt;Release
$ make
$ sudo make install
&lt;/pre&gt;&lt;/div&gt;</content><category term="develop"></category><category term="Raspberry Pi"></category><category term="fish shell"></category></entry><entry><title>neovimのset pasteの挙動</title><link href="/neovimnoset-pastenoju-dong.html" rel="alternate"></link><published>2018-04-23T00:00:00+09:00</published><updated>2018-04-23T00:00:00+09:00</updated><author><name>jiuya</name></author><id>tag:None,2018-04-23:/neovimnoset-pastenoju-dong.html</id><summary type="html">&lt;h2&gt;問題点&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;neovim の &lt;code&gt;:set paste&lt;/code&gt;の挙動がvimのときと反対になってるように見える。&lt;/li&gt;
&lt;li&gt;つまり、defaultでインデントがある文字列がそのまま貼り付けできて、&lt;code&gt;:set paste&lt;/code&gt;をするとindentが入ってしまう。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;環境&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;neovim v2.2.0&lt;/li&gt;
&lt;li&gt;tmux 2.3&lt;/li&gt;
&lt;li&gt;fish 2.7.1&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;調べる&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;落ち着いて&lt;code&gt;:help paste&lt;/code&gt;を見てみる。&lt;/li&gt;
&lt;li&gt;&lt;a href="https://neovim.io/doc/user/options.html#" title="paste"&gt;neovim option&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;This option is obsolete; |bracketed-paste-mode| is built-in.
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;なんかneovimではpaste optionは廃止されているらしい。&lt;/li&gt;
&lt;li&gt;brackted-paste-mode とは？&lt;/li&gt;
&lt;li&gt;&lt;a href="https://cirw.in/blog/bracketed-paste"&gt;bracketed paste mode&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;xtermの拡張で貼り付け時に文字列の前に&lt;code&gt;&amp;lt;ESC&amp;gt;200~&lt;/code&gt; 後ろに&lt;code&gt;&amp;lt;ESC&amp;gt;201 …&lt;/code&gt;&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;h2&gt;問題点&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;neovim の &lt;code&gt;:set paste&lt;/code&gt;の挙動がvimのときと反対になってるように見える。&lt;/li&gt;
&lt;li&gt;つまり、defaultでインデントがある文字列がそのまま貼り付けできて、&lt;code&gt;:set paste&lt;/code&gt;をするとindentが入ってしまう。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;環境&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;neovim v2.2.0&lt;/li&gt;
&lt;li&gt;tmux 2.3&lt;/li&gt;
&lt;li&gt;fish 2.7.1&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;調べる&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;落ち着いて&lt;code&gt;:help paste&lt;/code&gt;を見てみる。&lt;/li&gt;
&lt;li&gt;&lt;a href="https://neovim.io/doc/user/options.html#" title="paste"&gt;neovim option&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;This option is obsolete; |bracketed-paste-mode| is built-in.
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;なんかneovimではpaste optionは廃止されているらしい。&lt;/li&gt;
&lt;li&gt;brackted-paste-mode とは？&lt;/li&gt;
&lt;li&gt;&lt;a href="https://cirw.in/blog/bracketed-paste"&gt;bracketed paste mode&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;xtermの拡張で貼り付け時に文字列の前に&lt;code&gt;&amp;lt;ESC&amp;gt;200~&lt;/code&gt; 後ろに&lt;code&gt;&amp;lt;ESC&amp;gt;201~&lt;/code&gt; がつくようになる。&lt;/li&gt;
&lt;li&gt;つまり、手で打った文字かpasteした文字かを判別することができる。&lt;/li&gt;
&lt;li&gt;&lt;a href="https://srad.jp/~doda/journal/506765/"&gt;vim で bracketed paste modeに対応させる記事&lt;/a&gt;もあった。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;結論&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;最近の端末はBracketed Paste Mode に対応しているのでneovimではset pasteする必要はない。&lt;/li&gt;
&lt;li&gt;neovimでset pasteしたときにインデントが入ってしまうのは謎だがobsoleteなんだから使わなければいいや。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参考&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://neovim.io/doc/user/options.html#" title="paste"&gt;neovim option&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://cirw.in/blog/bracketed-paste"&gt;bracketed paste mode&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://invisible-island.net/xterm/ctlseqs/ctlseqs.html#h2-Bracketed-Paste-Mode"&gt;XTerm Control Sequences&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="develop"></category><category term="neovim"></category></entry></feed>