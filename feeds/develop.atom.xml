<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Hello Blog - develop</title><link href="/" rel="alternate"></link><link href="/feeds/develop.atom.xml" rel="self"></link><id>/</id><updated>2020-12-21T00:00:00+09:00</updated><entry><title>ODROID-HC4のススメ</title><link href="/odroid-hc4nosusume.html" rel="alternate"></link><published>2020-12-21T00:00:00+09:00</published><updated>2020-12-21T00:00:00+09:00</updated><author><name>jiuya</name></author><id>tag:None,2020-12-21:/odroid-hc4nosusume.html</id><summary type="html">&lt;p&gt;この記事は&lt;a href="https://adventar.org/calendars/5887"&gt;高知工科大 Advent Calendar 2020&lt;/a&gt;のn日目の記事です。
そしてこの記事はメモなのでそのうち更新されるかもしれない。&lt;/p&gt;
&lt;h2&gt;ODROID-HC4とは&lt;/h2&gt;
&lt;p&gt;韓国SBCメーカーのHardkernel社のNAS向けSBCである。  &lt;/p&gt;
&lt;p&gt;&lt;img alt="ODROID-HC4" src="https://cdn.hardkernel.com/wp-content/uploads/2020/10/ODROID-HC4_hdd-800x800.jpg"&gt;&lt;/p&gt;
&lt;p&gt;画像を見てもらうと分かる通りSATA接続でHDDがそのままブッ刺せる。
一見外付けHDDに見えるが、正体はHDDが刺せるSBC。もちろんSSDでも動く。
3.5inch以外に一応2.4inchも刺さる。（固定されないので不安定ではある）&lt;/p&gt;
&lt;p&gt;正面からは見えないが、1xMicroSDスロット・1x1GbEポート・1xUSB2.0・1xHDMI2.0(4K/60Hz出力可能)がついている。
ブートはMicroSD/SATA(HDD/SDD)/USBストレージ/PXEから可能。（MicroSDからが楽ではある）
HDMI2.0がついておりS905X3（STBなどで採用されているSoC）なので、メディアプレイヤー的な使い方も可能。&lt;/p&gt;
&lt;p&gt;電源が15V4A品と微妙に手に入りづらいので買うときに一緒にACアダプタも買ったほうが良い。(ACアダプタは$9.4)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;自分の思う利点をまとめると&lt;/li&gt;
&lt;li&gt;そこそこ速度の出るSATAポートが２つある。&lt;/li&gt;
&lt;li&gt;mainline linux kernel Ubutnu20.04が動く …&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;p&gt;この記事は&lt;a href="https://adventar.org/calendars/5887"&gt;高知工科大 Advent Calendar 2020&lt;/a&gt;のn日目の記事です。
そしてこの記事はメモなのでそのうち更新されるかもしれない。&lt;/p&gt;
&lt;h2&gt;ODROID-HC4とは&lt;/h2&gt;
&lt;p&gt;韓国SBCメーカーのHardkernel社のNAS向けSBCである。  &lt;/p&gt;
&lt;p&gt;&lt;img alt="ODROID-HC4" src="https://cdn.hardkernel.com/wp-content/uploads/2020/10/ODROID-HC4_hdd-800x800.jpg"&gt;&lt;/p&gt;
&lt;p&gt;画像を見てもらうと分かる通りSATA接続でHDDがそのままブッ刺せる。
一見外付けHDDに見えるが、正体はHDDが刺せるSBC。もちろんSSDでも動く。
3.5inch以外に一応2.4inchも刺さる。（固定されないので不安定ではある）&lt;/p&gt;
&lt;p&gt;正面からは見えないが、1xMicroSDスロット・1x1GbEポート・1xUSB2.0・1xHDMI2.0(4K/60Hz出力可能)がついている。
ブートはMicroSD/SATA(HDD/SDD)/USBストレージ/PXEから可能。（MicroSDからが楽ではある）
HDMI2.0がついておりS905X3（STBなどで採用されているSoC）なので、メディアプレイヤー的な使い方も可能。&lt;/p&gt;
&lt;p&gt;電源が15V4A品と微妙に手に入りづらいので買うときに一緒にACアダプタも買ったほうが良い。(ACアダプタは$9.4)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;自分の思う利点をまとめると&lt;/li&gt;
&lt;li&gt;そこそこ速度の出るSATAポートが２つある。&lt;/li&gt;
&lt;li&gt;mainline linux kernel Ubutnu20.04が動く。&lt;/li&gt;
&lt;li&gt;NASとラズパイなんかで動かしていたBotなどが小さな機器で完結する。&lt;/li&gt;
&lt;li&gt;HDDの物理的な換装が容易。&lt;/li&gt;
&lt;li&gt;NASを買うと思うと安い。$65 + $9.4(ACアダプタ) + 送料&lt;/li&gt;
&lt;li&gt;いろいろイジる用SBCを常時稼働させる理由を作れる。（自分にとっては地味に一番利点）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;要するにSBC収集家にとっては中々イカスSBCなのである。&lt;/strong&gt;&lt;/p&gt;
&lt;h2&gt;現在の環境&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;OS: Armbian_20.11.3_Odroidhc4_focal &lt;/li&gt;
&lt;li&gt;Linux Kernel: 5.9.14&lt;/li&gt;
&lt;li&gt;SATAスロット1: 6TB&lt;/li&gt;
&lt;li&gt;SATAスロット2: 空き &lt;/li&gt;
&lt;li&gt;ssh,xrdp セットアップ済み&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;NAS&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Sambaを動かしNAS運用している。&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ sudo apt -y update
$ sudo apt -y upgrade
$ sudo mkdir /mnt/hdd
$ sudo bash -c &lt;span class="s1"&gt;&amp;#39;echo &amp;quot;/dev/sda1       /mnt/hdd        ntfs-3g permissions,locale=ja_JP.UTF-8  0       2&amp;quot; &amp;gt;&amp;gt; /etc/fstab&amp;#39;&lt;/span&gt;
$ sudo apt -y install samba
$ sudo vim /etc/samba/smb.conf // sambaの設定をここでする
$ sudo pdbedit -a ユーザー名
$ sudo systemctl &lt;span class="nb"&gt;enable&lt;/span&gt; smbd
$ sudo reboot
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h4&gt;Slack Bot&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;HubotでWOL サーバーにしている。&lt;a href="https://k-side.hatenablog.jp/entry/2016/05/30/180000"&gt;参考文献&lt;/a&gt;
  （自分用Slackチームで &lt;code&gt;@home wol&lt;/code&gt; と打つと自宅のメインPCにWOLパケットが送られるサーバー）
&lt;img alt="slack-wol.png" src="/content/images/slack-wol.png"&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Hubot・wakeonlan インストール/setup&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ sudo apt -y install nodejs
$ sudo apt -y install npm
$ sudo apt -y install wakeonlan
$ mkdir ~/hubot
$ mkdir ~/hubot/magic
$ &lt;span class="nb"&gt;cd&lt;/span&gt; ~/hubot/magic
$ sudo npm install -g coffee-script hubot
$ sudo npm install -g yo generator-hubot
$ sudo npm install -g forever
$ sudo vim /etc/systemd/system/hubot.service //systemd ユニットファイル書く
$ sudo systemctl daemon-reload
$ sudo systemctl &lt;span class="nb"&gt;enable&lt;/span&gt; hubot
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;スクリプト部分は割愛&lt;/p&gt;
&lt;h4&gt;&lt;a href="https://github.com/whiteleaf7/narou/wiki"&gt;narou.rb&lt;/a&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;narou.rb の narou WEB UIサーバーを動かして、ローカルLAN内からアクセスできるようにしている。&lt;/li&gt;
&lt;li&gt;Web UI上にURLを貼り付けるとダウンロード・ePub変換され、GoogleDriveにePubが保存されるようにしている。(narou.rbのePub保存先にGoogleDrive(&lt;a href="https://github.com/astrada/google-drive-ocamlfuse"&gt;google-drive-ocamlfuse&lt;/a&gt;)を指定している)&lt;/li&gt;
&lt;li&gt;(そしてGoogle Drive上のePubをAndroidのMoon+ Readerで読む!快適！)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;narou.rb インストール。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ sudo apt install -y ruby
$ sudo apt install -y ruby-dev
$ sudo apt install -y default-jre
$ sudo gem install narou
$ sudo vim /etc/systemd/system/narou-web.service //systemd ユニットファイル書く
$ sudo systemctl daemon-reload
$ sudo systemctl &lt;span class="nb"&gt;enable&lt;/span&gt; narou-web
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;google-drive-ocamlfuse インストール。(ブラウザ認証があるのでxrdp上のシェルで)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ sudo add-apt-repository ppa:alessandro-strada/ppa
$ sudo apt update
$ sudo apt -y install firefox firefox-locale-ja // GUIのブラウザで認証のため
$ sudo apt install -y google-drive-ocamlfuse
$ google-drive-ocamlfuse
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;code&gt;sudo vim /usr/bin/gdfuse&lt;/code&gt; で以下の内容を書き込む。（ユーザー名は認証時のLinuxユーザー名）&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="ch"&gt;#!/bin/bash&lt;/span&gt;

su ユーザー名 -l -c &lt;span class="s2"&gt;&amp;quot;/usr/bin/google-drive-ocamlfuse -label &lt;/span&gt;&lt;span class="nv"&gt;$1&lt;/span&gt;&lt;span class="s2"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$*&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
&lt;span class="nb"&gt;exit&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;code&gt;/mnt/gdrive&lt;/code&gt;にマウント。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ sudo mkdir /mnt/gdrive
$ sudo bash -c &lt;span class="s1"&gt;&amp;#39;echo &amp;quot;gdfuse#default  /mnt/gdrive     fuse    uid=1000,gid=1000,allow_other,user,_netdev     0       0&amp;quot; &amp;gt;&amp;gt; /etc/fstab&amp;#39;&lt;/span&gt;
$ mount -a
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;narou WEB UI上でePub出力先を&lt;code&gt;/mnt/gdrive&lt;/code&gt;以下の好きなディレクトリに設定する。&lt;/p&gt;
&lt;h2&gt;今後したいこと&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;SATAスロットが一本空いてるのでそのうちソフトウェアRAID1したい。&lt;/li&gt;
&lt;li&gt;Slackに&lt;code&gt;@home narou URL&lt;/code&gt;とすることでなろう小説をダンロード・ePub変換を走らせたい。（やってみたがHubotのスクリプトで&lt;code&gt;narou download URL&lt;/code&gt;が動かない。有識者求む。）&lt;/li&gt;
&lt;li&gt;microSDの命が消える前にイメージバックアップを仕込みたい。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参考&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://k-side.hatenablog.jp/entry/2016/05/30/180000"&gt;Slack から Hubot 経由で会社にあるパソコンの電源をオンにする&lt;/a&gt;&lt;/p&gt;</content><category term="develop"></category><category term="develop"></category><category term="odroid"></category><category term="ubuntu"></category><category term="hubot"></category></entry><entry><title>自分の開発環境</title><link href="/zi-fen-nokai-fa-huan-jing.html" rel="alternate"></link><published>2018-12-03T00:00:00+09:00</published><updated>2018-12-03T00:00:00+09:00</updated><author><name>jiuya</name></author><id>tag:None,2018-12-03:/zi-fen-nokai-fa-huan-jing.html</id><summary type="html">&lt;p&gt;この記事は&lt;a href="https://adventar.org/calendars/2959"&gt;高知工科大 Advent Calendar 2018&lt;/a&gt;の三日目の記事です。&lt;/p&gt;
&lt;h2&gt;はじめに&lt;/h2&gt;
&lt;p&gt;いよいよ毎年恒例&lt;strong&gt;Advent Calendar&lt;/strong&gt;の時期がやってきました。&lt;/p&gt;
&lt;p&gt;これといって書くことが思いつかなかったので2018年の自分の開発環境(Linux)でも書こうと思います。&lt;/p&gt;
&lt;p&gt;この開発環境では主にマイコンの開発や組み込みLinuxの開発に使用してます。&lt;/p&gt;
&lt;h2&gt;PC&lt;/h2&gt;
&lt;p&gt;PCは&lt;strong&gt;ThinkPad X250&lt;/strong&gt;を使用してます。&lt;br&gt;
メモリが4GB(少ねぇ)でCPUがi5-5300Uです。  重い作業はメインPC(Windows)でやらせるのでスペックは抑えめです。&lt;br&gt;
そのうちメモリ8GBにしたい。&lt;/p&gt;
&lt;h2&gt;ディストリビューション&lt;/h2&gt;
&lt;p&gt;OSは&lt;strong&gt;DebianのStable&lt;/strong&gt;(stretch)です。&lt;br&gt;
Debianを選択した理由は主に以下の点です。
- Ubuntu Desktopと比べていらないものが入ってない。
- Ubuntu Desktopより簡単にディスプレイマネージャ、ウィンドウマネージャを変更できる。
- Gentooと比べて非力なPCでも初期セットアップが早い。
- Archはpacmanに慣れることができなかった。&lt;/p&gt;
&lt;p&gt;サービスマネージャはDebianのdefaultの&lt;strong&gt;systemd&lt;/strong&gt;を使用しています。&lt;/p&gt;
&lt;h2&gt;ディスプレイマネージャ、ウィンドウマネージャ&lt;/h2&gt;
&lt;p&gt;ディスプレイマネージャは&lt;strong&gt;LightDM&lt;/strong&gt;です。選択理由はメジャーだから。むしろ他のディスプレイマネージャをあまり使ったことがない …&lt;/p&gt;</summary><content type="html">&lt;p&gt;この記事は&lt;a href="https://adventar.org/calendars/2959"&gt;高知工科大 Advent Calendar 2018&lt;/a&gt;の三日目の記事です。&lt;/p&gt;
&lt;h2&gt;はじめに&lt;/h2&gt;
&lt;p&gt;いよいよ毎年恒例&lt;strong&gt;Advent Calendar&lt;/strong&gt;の時期がやってきました。&lt;/p&gt;
&lt;p&gt;これといって書くことが思いつかなかったので2018年の自分の開発環境(Linux)でも書こうと思います。&lt;/p&gt;
&lt;p&gt;この開発環境では主にマイコンの開発や組み込みLinuxの開発に使用してます。&lt;/p&gt;
&lt;h2&gt;PC&lt;/h2&gt;
&lt;p&gt;PCは&lt;strong&gt;ThinkPad X250&lt;/strong&gt;を使用してます。&lt;br&gt;
メモリが4GB(少ねぇ)でCPUがi5-5300Uです。  重い作業はメインPC(Windows)でやらせるのでスペックは抑えめです。&lt;br&gt;
そのうちメモリ8GBにしたい。&lt;/p&gt;
&lt;h2&gt;ディストリビューション&lt;/h2&gt;
&lt;p&gt;OSは&lt;strong&gt;DebianのStable&lt;/strong&gt;(stretch)です。&lt;br&gt;
Debianを選択した理由は主に以下の点です。
- Ubuntu Desktopと比べていらないものが入ってない。
- Ubuntu Desktopより簡単にディスプレイマネージャ、ウィンドウマネージャを変更できる。
- Gentooと比べて非力なPCでも初期セットアップが早い。
- Archはpacmanに慣れることができなかった。&lt;/p&gt;
&lt;p&gt;サービスマネージャはDebianのdefaultの&lt;strong&gt;systemd&lt;/strong&gt;を使用しています。&lt;/p&gt;
&lt;h2&gt;ディスプレイマネージャ、ウィンドウマネージャ&lt;/h2&gt;
&lt;p&gt;ディスプレイマネージャは&lt;strong&gt;LightDM&lt;/strong&gt;です。選択理由はメジャーだから。むしろ他のディスプレイマネージャをあまり使ったことがない。&lt;/p&gt;
&lt;p&gt;ウィンドウマネージャはタイル型ウィンドウマネージャのi3wmです。&lt;br&gt;
タイル型ウィンドウマネージャとはWindowsなどのようにウィンドウが重なることがなくタイル状に等間隔に配置されるウィンドウマネージャの総称です。&lt;br&gt;
i3の選択理由は以下の点です。
- ほぼキーボードで作業できる。一応マウスも使える。(自分のキーバインドでは&lt;strong&gt;Windows key + Enter&lt;/strong&gt;でターミナルが開く、&lt;strong&gt;Windows key + →&lt;/strong&gt;でウィンドウ移動など)
- ダイアログウインドウなどは普通のデスクトップ環境と同じように使える。ダイアログでないウインドウもショートカットキーでタイル化解除(フローティング化)させることが可能。  &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Windows key + Enter&lt;/strong&gt; でターミナルを開らける快感を覚えると戻って来れなくなります。&lt;br&gt;
詳細は他のサイトに譲ります。&lt;br&gt;
&lt;a href="https://trap.jp/post/425/"&gt;タイル型ウインドウマネージャーが凄い - i3wm&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;ターミナル環境&lt;/h2&gt;
&lt;p&gt;使用しているターミナルは&lt;a href="https://launchpad.net/sakura"&gt;&lt;strong&gt;Sakura&lt;/strong&gt;&lt;/a&gt;を使用してます。&lt;br&gt;
テキストエディタでもサーバーの会社でもないです。&lt;br&gt;
&lt;strong&gt;libvte&lt;/strong&gt;(gnome-terminal)ベースの端末エミュレータです。&lt;br&gt;
画面分割やタブなどの機能はtmuxやvimなどで行うので、シンプルなlibvteベースのターミナルがほしかったのでこれにしました。&lt;/p&gt;
&lt;h2&gt;tmux&lt;/h2&gt;
&lt;p&gt;昔はscreenを使っていましたが今はtmuxです。&lt;br&gt;
prefixは&lt;strong&gt;Ctrl+a&lt;/strong&gt;にしています。Caps LockをCtrlに割り当てているので、そこから近いaを選択しているだけです。minicomのdefaultのprefixと被っているのがちょっと問題ではあります。  &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;tpm&lt;/strong&gt;を使ってplugin管理もしてます。
以下が入れているpluginです。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;set -g @tpm_plugins &amp;#39;               \&lt;/span&gt;
&lt;span class="err"&gt; tmux-plugins/tpm                   \&lt;/span&gt;
&lt;span class="err"&gt; tmux-plugins/tmux-yank             \&lt;/span&gt;
&lt;span class="err"&gt; tmux-plugins/tmux-open             \&lt;/span&gt;
&lt;span class="err"&gt; tmux-plugins/tmux-resurrect        \&lt;/span&gt;
&lt;span class="err"&gt; tmux-plugins/tmux-battery          \&lt;/span&gt;
&lt;span class="err"&gt; tmux-plugins/tmux-pain-control     \&lt;/span&gt;
&lt;span class="err"&gt; tmux-plugins/tmux-copycat          \&lt;/span&gt;
&lt;span class="err"&gt; tmux-plugins/tmux-prefix-highlight \&lt;/span&gt;
&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;tmux-yank&lt;/strong&gt;や&lt;strong&gt;tmux-copycat&lt;/strong&gt;などのコピー系プラグインは端末に表示されているすべての情報を簡単にコピーペーストできるので非常に便利です。  &lt;/p&gt;
&lt;h2&gt;shell&lt;/h2&gt;
&lt;p&gt;shellは&lt;strong&gt;fish shell+neovim&lt;/strong&gt;を使用しています。&lt;br&gt;
パッケージ管理には&lt;strong&gt;Fisherman&lt;/strong&gt;を使用してます。&lt;br&gt;
fish は特に設定しなくても見やすくて使いやすいシェルになるのでおすすめです。&lt;br&gt;
ただbashやzshの記法に慣れているとパイプとかリダイレクトとかで自分はよく間違えるのでその辺はめんどくさいです。&lt;/p&gt;
&lt;h2&gt;おわりに&lt;/h2&gt;
&lt;p&gt;2018年は転職?したりといろいろ変化のあった年だったので開発環境の入れ替えなどをしました。&lt;br&gt;
この辺の情報はすぐトレンドが移るのでこれからもキャッチアップし続けれる人間になりたいなーと思いました。&lt;br&gt;
書くの疲れたのでこの辺で終わります。&lt;/p&gt;</content><category term="develop"></category><category term="develop"></category><category term="debian"></category><category term="i3wm"></category></entry><entry><title>Raspberry Pi でfishのビルド</title><link href="/raspberry-pi-defishnobirudo.html" rel="alternate"></link><published>2018-04-24T00:00:00+09:00</published><updated>2018-04-24T00:00:00+09:00</updated><author><name>jiuya</name></author><id>tag:None,2018-04-24:/raspberry-pi-defishnobirudo.html</id><content type="html">&lt;h2&gt;動機&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;自分のメインの環境をfishにしてfishの楽さを知ってしまったのでラズパイにも入れたい。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;環境&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Raspberry Pi 3 Model B V1.2&lt;/li&gt;
&lt;li&gt;rasbian-stretch-lite 2018-04-18&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;準備&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;必要なパッケージをインストールする。&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ sudo aptitude install cmake autoconf git g++ libncurses5-dev &lt;span class="se"&gt;\&lt;/span&gt;
gettext libreadline-dev libeditline-dev doxygen libedit-dev
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;ビルド&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ git clone https://github.com/fish-shell/fish-shell.git
$ &lt;span class="nb"&gt;cd&lt;/span&gt; fish-shell
$ mkdir build
$ &lt;span class="nb"&gt;cd&lt;/span&gt; build
$ cmake .. -DCMAKE_BUILD_TYPE&lt;span class="o"&gt;=&lt;/span&gt;Release
$ make
$ sudo make install
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content><category term="develop"></category><category term="develop"></category><category term="Raspberry Pi"></category><category term="fish shell"></category></entry><entry><title>neovimのset pasteの挙動</title><link href="/neovimnoset-pastenoju-dong.html" rel="alternate"></link><published>2018-04-23T00:00:00+09:00</published><updated>2018-04-23T00:00:00+09:00</updated><author><name>jiuya</name></author><id>tag:None,2018-04-23:/neovimnoset-pastenoju-dong.html</id><summary type="html">&lt;h2&gt;問題点&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;neovim の &lt;code&gt;:set paste&lt;/code&gt;の挙動がvimのときと反対になってるように見える。&lt;/li&gt;
&lt;li&gt;つまり、defaultでインデントがある文字列がそのまま貼り付けできて、&lt;code&gt;:set paste&lt;/code&gt;をするとindentが入ってしまう。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;環境&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;neovim v2.2.0&lt;/li&gt;
&lt;li&gt;tmux 2.3&lt;/li&gt;
&lt;li&gt;fish 2.7.1&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;調べる&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;落ち着いて&lt;code&gt;:help paste&lt;/code&gt;を見てみる。&lt;/li&gt;
&lt;li&gt;&lt;a href="https://neovim.io/doc/user/options.html#" title="paste"&gt;neovim option&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;This option is obsolete; |bracketed-paste-mode| is built-in.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;ul&gt;
&lt;li&gt;なんかneovimではpaste optionは廃止されているらしい。&lt;/li&gt;
&lt;li&gt;brackted-paste-mode とは？&lt;/li&gt;
&lt;li&gt;&lt;a href="https://cirw.in/blog/bracketed-paste"&gt;bracketed paste mode&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;xtermの拡張で貼り付け時に文字列の前に&lt;code&gt;&amp;lt;ESC&amp;gt;200~&lt;/code&gt; 後ろに&lt;code&gt;&amp;lt;ESC&amp;gt;201 …&lt;/code&gt;&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;h2&gt;問題点&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;neovim の &lt;code&gt;:set paste&lt;/code&gt;の挙動がvimのときと反対になってるように見える。&lt;/li&gt;
&lt;li&gt;つまり、defaultでインデントがある文字列がそのまま貼り付けできて、&lt;code&gt;:set paste&lt;/code&gt;をするとindentが入ってしまう。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;環境&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;neovim v2.2.0&lt;/li&gt;
&lt;li&gt;tmux 2.3&lt;/li&gt;
&lt;li&gt;fish 2.7.1&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;調べる&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;落ち着いて&lt;code&gt;:help paste&lt;/code&gt;を見てみる。&lt;/li&gt;
&lt;li&gt;&lt;a href="https://neovim.io/doc/user/options.html#" title="paste"&gt;neovim option&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;This option is obsolete; |bracketed-paste-mode| is built-in.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;ul&gt;
&lt;li&gt;なんかneovimではpaste optionは廃止されているらしい。&lt;/li&gt;
&lt;li&gt;brackted-paste-mode とは？&lt;/li&gt;
&lt;li&gt;&lt;a href="https://cirw.in/blog/bracketed-paste"&gt;bracketed paste mode&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;xtermの拡張で貼り付け時に文字列の前に&lt;code&gt;&amp;lt;ESC&amp;gt;200~&lt;/code&gt; 後ろに&lt;code&gt;&amp;lt;ESC&amp;gt;201~&lt;/code&gt; がつくようになる。&lt;/li&gt;
&lt;li&gt;つまり、手で打った文字かpasteした文字かを判別することができる。&lt;/li&gt;
&lt;li&gt;&lt;a href="https://srad.jp/~doda/journal/506765/"&gt;vim で bracketed paste modeに対応させる記事&lt;/a&gt;もあった。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;結論&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;最近の端末はBracketed Paste Mode に対応しているのでneovimではset pasteする必要はない。&lt;/li&gt;
&lt;li&gt;neovimでset pasteしたときにインデントが入ってしまうのは謎だがobsoleteなんだから使わなければいいや。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参考&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://neovim.io/doc/user/options.html#" title="paste"&gt;neovim option&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://cirw.in/blog/bracketed-paste"&gt;bracketed paste mode&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://invisible-island.net/xterm/ctlseqs/ctlseqs.html#h2-Bracketed-Paste-Mode"&gt;XTerm Control Sequences&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="develop"></category><category term="develop"></category><category term="neovim"></category></entry></feed>